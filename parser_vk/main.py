from functools import wraps
from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    CommandHandler,
    Updater,
    MessageHandler,
    Filters,
    CallbackContext,
    JobQueue,
)
from telegram.ext import CallbackQueryHandler
from key_board import (
    key_board_start,
    back_key,
    key_board_choice,
    keyboard_sub_unsub,
    key_board_count,
    keyboard_frequency,
)
from parser_vk import get_posts_vk
from database.tools import *
from database import admin_tools
from tag_name import tag_names_dict
import answer_options
from loguru import logger
from flask import Flask, request

server = Flask(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∞
db = admin_tools.Admin()
key_board_starting = InlineKeyboardMarkup(key_board_start)
back_key = InlineKeyboardMarkup(back_key)
key_board_choice = InlineKeyboardMarkup(key_board_choice)
keyboard_sub_unsub = InlineKeyboardMarkup(keyboard_sub_unsub)
key_board_count = ReplyKeyboardMarkup(key_board_count, one_time_keyboard=True)
keyboard_frequency = InlineKeyboardMarkup(keyboard_frequency)


# –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –æ—à–∏–±–æ–∫
def log_error(f):
    @wraps(f)
    def inner(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            raise e

    return inner


@log_error
def button(update, context):
    id_user = update.effective_user.id
    query = update.callback_query
    variant = query.data
    query.answer()

    if variant == "cintanc":
        query.edit_message_text(
            text="–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –≤–æ—Ç –Ω–∞—à–∏\n"
            "–∫–æ–Ω—Ç–∞–∫—Ç—ã:\n"
            "–ì—Ä—É–ø–ø–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –ù–∞—É—á–∏–º.online https://vk.com/nauchim.online\n"
            "–°–∞–π—Ç —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ https://www.–Ω–∞—É—á–∏–º.online",
            reply_markup=back_key,
        )
    if variant == "exit":
        query.edit_message_text(
            text="–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏—Ö—Å—è –ø–æ—Å—Ç–æ–≤: /count\n"
            "–í—ã–±–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: /choice\n"
            "–í—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: /frequency\n"
            "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π : /view\n"
            "–í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: /admin\n"
            "–ù–∞—á–∞—Ç—å —Å–±–æ—Ä –ø–æ—Å—Ç–æ–≤ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏: /start_parser",
            reply_markup=key_board_starting,
        )

    if variant in tag_names_dict.keys():
        context.user_data["HASH"] = variant
        query.edit_message_text(variant, reply_markup=keyboard_sub_unsub)
        logger.info(f'–ü–æ–ª—É—á–∏–ª {context.user_data["HASH"]}')

    if variant == "back":
        query.edit_message_text(
            "üëá–ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–πüëá\n"
            "1.–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å –¥–µ—Ç—Å–∫–∏—Ö –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: #TechnoCom\n"
            "2.–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π ¬´IT—Ñ–µ—Å—Ç¬ª: #IT_fest_2022\n"
            "3.–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∞—ç—Ä–æ–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å: #IASF2022\n"
            "4.–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –æ–±—â–µ–∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π: #–§–µ—Å—Ç–∏–≤–∞–ª—å–û–ö–ö\n"
            "5.–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –Ω–µ–π—Ä–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π ¬´–ù–µ–π—Ä–æ—Ñ–µ—Å—Ç¬ª: #–ù–µ–π—Ä–æ—Ñ–µ—Å—Ç\n"
            "6.–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∫–æ–Ω–∫—É—Ä—Å –ø–æ –º–∏–∫—Ä–æ–±–∏–æ–ª–æ–≥–∏–∏ ¬´–ù–µ–≤–∏–¥–∏–º—ã–π –º–∏—Ä: #–ù–µ–≤–∏–¥–∏–º—ã–π–ú–∏—Ä\n"
            "7.–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∫–æ–Ω–∫—É—Ä—Å –Ω–∞—É—á–Ω–æ–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ä–∞–±–æ—Ç: #–ö–æ–Ω–∫—É—Ä—Å–ù–ò–†",
            reply_markup=key_board_choice,
        )

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
    if variant == "subscribe":
        if not checked_hash_tag(tag_hash=context.user_data["HASH"], id_users=id_user):
            add_hash_tag(context.user_data["HASH"], id_user)
            query.edit_message_text(answer_options.get_answer_subscribe())
        else:
            query.edit_message_text("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ üòâ")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è
    if variant == "unsubscribe":
        if checked_hash_tag(tag_hash=context.user_data["HASH"], id_users=id_user):
            delete_hash_tag(context.user_data["HASH"], user_id=id_user)
            query.edit_message_text(answer_options.get_answer_unsubcribe())
        else:
            query.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ üòë")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–ª —á–∞—Å—Ç–æ—Ç—É
    if variant in ["one_day", "one_three_day", "one_week"]:
        update_freq_day(callback_freq=variant, id_user=update.effective_user.id)
        query.edit_message_text(text=answer_options.get_answer_freq())


@log_error
def helping(update: Updater, context: CallbackContext):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–æ–º
    """
    update.message.reply_text(
        "–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏—Ö—Å—è –ø–æ—Å—Ç–æ–≤: /count\n"
        "–í—ã–±–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: /choice\n"
        "–í—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: /frequency\n"
        "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π : /view\n"
        "–í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: /admin\n"
        "–ù–∞—á–∞—Ç—å —Å–±–æ—Ä –ø–æ—Å—Ç–æ–≤ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏: /start_parser",
        reply_markup=key_board_starting,
    )


@log_error
def start(update: Updater, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è üòã, —è –±–æ—Ç-–ø–∞—Ä—Å–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–µ—Ä—ë—Ç\n"
        "–Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø –≤–∫. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å\n"
        "–∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞–∂–º–∏ /help\n"
    )
    if user_exists(id_user := update.effective_user.id) is None:
        add_users(id_user)
    else:
        update.message.reply_text("–í—ã —É–∂–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üòÑ")


@log_error
def answer_count(update: Updater, context: CallbackContext):
    id_user = update.effective_user.id
    if update.message.text in "12345678910":
        update_count_posts(count=update.message.text, id_user=id_user)
        update.message.reply_text(
            "–Ø –ø—Ä–∏–Ω—è–ª –≤–∞—à –æ—Ç–≤–µ—ÇüòÅüòÅüòÅ\n", reply_markup=ReplyKeyboardRemove()
        )
        logger.info(f"–ó–∞–ø–∏—Å–∞–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ {(count := get_count_posts(id_user))}")


@log_error
def count(update: Updater, context: CallbackContext):
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞–µ–º—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –≥—Ä—É–ø–ø—ã –≤–∫ üëáüëáüëá",
        reply_markup=key_board_count,
    )


@log_error
def choice(update: Updater, context: CallbackContext):
    update.message.reply_text(
        "üëá–ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–πüëá\n"
        "1.–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å –¥–µ—Ç—Å–∫–∏—Ö –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: #TechnoCom\n"
        "2.–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π ¬´IT—Ñ–µ—Å—Ç¬ª: #IT_fest_2022\n"
        "3.–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∞—ç—Ä–æ–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å: #IASF2022\n"
        "4.–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –æ–±—â–µ–∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π: #–§–µ—Å—Ç–∏–≤–∞–ª—å–û–ö–ö\n"
        "5.–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –Ω–µ–π—Ä–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π ¬´–ù–µ–π—Ä–æ—Ñ–µ—Å—Ç¬ª: #–ù–µ–π—Ä–æ—Ñ–µ—Å—Ç\n"
        "6.–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∫–æ–Ω–∫—É—Ä—Å –ø–æ –º–∏–∫—Ä–æ–±–∏–æ–ª–æ–≥–∏–∏ ¬´–ù–µ–≤–∏–¥–∏–º—ã–π –º–∏—Ä: #–ù–µ–≤–∏–¥–∏–º—ã–π–ú–∏—Ä\n"
        "7.–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∫–æ–Ω–∫—É—Ä—Å –Ω–∞—É—á–Ω–æ–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ä–∞–±–æ—Ç: #–ö–æ–Ω–∫—É—Ä—Å–ù–ò–†",
        reply_markup=key_board_choice,
    )


@log_error
def frequency(update: Updater, context: CallbackContext):
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π", reply_markup=keyboard_frequency
    )


@log_error
def view_fag(update, context):
    if get_spisok_hash_tag(update.message.chat_id) is not None:
        update.message.reply_text(
            f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ö—ç—à—Ç–µ–≥–∏ –≥—Ä—É–ø–øüëá\n"
            f'{", ".join(get_spisok_hash_tag(update.message.chat_id))}\n'
        )
    else:
        update.message.reply_text("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –∫–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ üòß")


@log_error
def message_parse(context):
    id_users = context.job.context

    if not get_count_posts(id_users)[0]:
        update_count_posts(count=1, id_user=id_users)

    if not if_hash_tag_in_db(id_users):
        context.bot.send_message(
            chat_id=context.job.context,
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –∫–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏üòÆüòÆüòÆ\n"
            "–ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Ç–æ –Ω–∞–∂–º–∏—Ç–µ /choice",
        )
    else:
        count = get_count_posts(id_users)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö –±–æ—Ç–æ–º
        spisok_tag = get_spisok_hash_tag(
            id_users
        )  # –°–ø–∏—Å–æ–∫ —Ö—ç—à—Ç–µ–≥–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å

        logger.info(
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º –ø–æ—Å—Ç—ã: {count[0]} —Å–ø–∏—Å–æ–∫ —Ö—ç—à: {spisok_tag}"
        )
        for elem in spisok_tag:
            dict_posts = get_posts_vk(tag_names_dict[elem], count)
            context.bot.send_message(
                chat_id=context.job.context,
                text=f"üëáüëáüëá –ù–∏–∂–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ—Å—Ç–æ–≤ —Ö—ç—à—Ç–µ–≥–∞ {elem} üëáüëá",
            )

            # –í—ã–≤–æ–¥–∏–º –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã –≥—Ä—É–ø–ø
            for news in [elem["text"] for elem in dict_posts["items"]][::-1]:
                context.bot.send_message(chat_id=context.job.context, text=news)


@log_error
def got_parse_mod(update, context):
    # –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    dict_freg_day = {
        "one_three_day": 259200,
        "one_week": 604800,
        "one_day": 86400
    }

    var = get_freq_day_seconds(update.message.chat_id)[0]

    if var in dict_freg_day.keys():
        update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ —Ç–æ –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–±—Ä–∞–ª–∏)"
        )
        context.job_queue.run_repeating(
            callback=message_parse,
            interval=dict_freg_day[var],
            context=update.message.chat_id,
        )


@log_error
def registration(update, context):
    # –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if db.is_admin_is_db(admin_id=update.effective_user.id):
        update.message.reply_text(
            '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n'
            '–ü—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'
        )
    else:
        pass


@log_error
def password(update, context):
    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞

    if update.message.text == "—Å–µ–∫—Ä–µ—Ç":
        update.message.reply_text(
            '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –ø–æ–¥—Ö–æ–¥–∏—Ç üòâ'
        )
        return registration(update=update, context=context)
    else:
        update.message.reply_text(
            'üòÆ –ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π üòÆ'
        )


@log_error
def admin(update, context):
    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –±—É–¥—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
    update.message.reply_text(
        "üòë –í—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. üòë\n"
        "–î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–∞—Ä–æ–ª—å,\n"
        "–∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã–¥–∞–Ω –≤–∞–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    )


update = Updater(token=config.BOT_TOKEN, use_context=True)
dis = update.dispatcher
job_queue = JobQueue()
job_queue.set_dispatcher(dis)

dis.add_handler(CommandHandler("admin", admin))
dis.add_handler(CommandHandler("help", helping))
dis.add_handler(CommandHandler("start", start))
dis.add_handler(CommandHandler("count", count))
dis.add_handler(CommandHandler("choice", choice))
dis.add_handler(CommandHandler("frequency", frequency))
dis.add_handler(CommandHandler("start_parser", got_parse_mod, pass_job_queue=True))
dis.add_handler(CommandHandler("view", view_fag))
dis.add_handler(MessageHandler(Filters.text, password))
dis.add_handler(MessageHandler(Filters.text, answer_count))
dis.add_handler(CallbackQueryHandler(callback=button, pass_chat_data=True))


update.start_polling()
job_queue.start()
update.idle()


if __name__ == "__main__":
    update.remove_webhook()
    update.set_webhook(url=config.API_URL)
    server.run(host="0.0.0.0", port=5000)
