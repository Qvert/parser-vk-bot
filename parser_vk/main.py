from functools import wraps
from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    CommandHandler,
    ConversationHandler,
    Updater,
    MessageHandler,
    Filters,
    JobQueue,
)
from telegram.ext import CallbackQueryHandler
from key_board import (
    key_board_start,
    back_key,
    generation_key_board,
    keyboard_sub_unsub,
    key_board_count,
    keyboard_frequency,
    # key_board_help
)
from database.tools import Database
from database.admin_tools import Admin
from parser_vk.parser_vk_function import get_posts_vk
from tag_name import *
import answer_options
from validators import *
import os
from loguru import logger
from hash_function import *


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∞
db = Database()
db_admin = Admin()
key_board_starting = InlineKeyboardMarkup(key_board_start)
back_key = InlineKeyboardMarkup(back_key)
keyboard_sub_unsub = InlineKeyboardMarkup(keyboard_sub_unsub)
key_board_count = ReplyKeyboardMarkup(key_board_count, one_time_keyboard=True)
# key_board_help = ReplyKeyboardMarkup(key_board_help)
keyboard_frequency = InlineKeyboardMarkup(keyboard_frequency)


# –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –æ—à–∏–±–æ–∫
def log_error(f):
    @wraps(f)
    def inner(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            raise e

    return inner


@log_error
def button(update, context):
    id_user = hash_word(str(update.effective_user.id))
    query = update.callback_query
    variant = query.data
    query.answer()

    if variant == "cintanc":
        query.edit_message_text(
            text="–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –≤–æ—Ç –Ω–∞—à–∏\n"
            "–∫–æ–Ω—Ç–∞–∫—Ç—ã:\n"
            "–ì—Ä—É–ø–ø–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –ù–∞—É—á–∏–º.online https://vk.com/nauchim.online\n"
            "–°–∞–π—Ç —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ https://www.–Ω–∞—É—á–∏–º.online",
            reply_markup=back_key,
        )
    if variant == "exit":
        query.edit_message_text(
            text="üëá –ù–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞, –∞ —Ç–∞–∫–∂–µ –Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ üëá\n"
            "üìù –í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏—Ö—Å—è –ø–æ—Å—Ç–æ–≤: /count\n"
            "üîÄ –í—ã–±–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: /choice\n"
            "üïî –í—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: /frequency\n"
            "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π : /view\n"
            "üîê –í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: /admin\n"
            "üì¨ –ù–∞—á–∞—Ç—å —Å–±–æ—Ä –ø–æ—Å—Ç–æ–≤ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏: /start_parser",
            reply_markup=key_board_starting,
        )

    if variant in list_hash_database():
        context.user_data["HASH"] = variant
        query.edit_message_text(variant, reply_markup=keyboard_sub_unsub)
        logger.info(f'–ü–æ–ª—É—á–∏–ª {context.user_data["HASH"]}')

    if variant == "back":
        query.edit_message_text(
            generation_list_news(
                tag_name=list_hash_database(), news_list=list_name_new()
            ),
            reply_markup=InlineKeyboardMarkup(
                generation_key_board(list_hash_database())
            ),
        )

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
    if variant == "subscribe":

        if not db.checked_hash_tag(
            tag_hash=context.user_data["HASH"], id_users=id_user
        ):
            db.add_hash_tag(context.user_data["HASH"], id_user)
            query.edit_message_text(answer_options.get_answer_subscribe())
        else:
            query.edit_message_text("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ üòâ")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è
    if variant == "unsubscribe":
        if db.checked_hash_tag(tag_hash=context.user_data["HASH"], id_users=id_user):
            db.delete_hash_tag(context.user_data["HASH"], user_id=id_user)
            query.edit_message_text(answer_options.get_answer_unsubcribe())
        else:
            query.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ üòë")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–ª —á–∞—Å—Ç–æ—Ç—É
    if variant in ["one_day", "one_three_day", "one_week"]:
        db.update_freq_day(callback_freq=variant, id_user=id_user)
        query.edit_message_text(text=answer_options.get_answer_freq())


@log_error
def helping(update: Updater, _):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–æ–º
    """
    update.message.reply_text(
        "üëá –ù–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞, –∞ —Ç–∞–∫–∂–µ –Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ üëá\n"
        "üìù –í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏—Ö—Å—è –ø–æ—Å—Ç–æ–≤: /count\n"
        "üîÄ –í—ã–±–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: /choice\n"
        "üïî –í—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: /frequency\n"
        "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π : /view\n"
        "üîê –í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: /admin\n"
        "üì¨ –ù–∞—á–∞—Ç—å —Å–±–æ—Ä –ø–æ—Å—Ç–æ–≤ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏: /start_parser",
        reply_markup=key_board_starting
    )


@log_error
def start(update: Updater, context):
    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    context.bot.send_photo(chat_id=update.effective_user.id,
                           photo='https://st3.depositphotos.com/29688696/31993/v/1600/depositphotos_319933748-stock-illustration-chat-bot-say-hi-robots.jpg')
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, —è –±–æ—Ç-–ø–∞—Ä—Å–µ—Ä,\n"
        "–∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø –≤–∫\n"
        "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—è –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞–∂–º–∏ /help"
    )
    id_hash = hash_word(str(update.effective_user.id))
    if db.user_exists(id_hash) is None:
        db.add_users(id_hash)
    else:
        update.message.reply_text("–í—ã —É–∂–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üòÑ")


@log_error
def answer_count(update: Updater, _):
    id_user = hash_word(str(update.effective_user.id))
    if update.message.text in "12345678910":
        db.update_count_posts(count=update.message.text, id_user=id_user)
        update.message.reply_text(
            "–Ø –ø—Ä–∏–Ω—è–ª –≤–∞—à –æ—Ç–≤–µ—ÇüòÅüòÅüòÅ\n", reply_markup=ReplyKeyboardRemove()
        )
        logger.info(f"–ó–∞–ø–∏—Å–∞–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ {(db.get_count_posts(id_user))}")


@log_error
def count(update: Updater, _):
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞–µ–º—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –≥—Ä—É–ø–ø—ã –≤–∫ üëáüëáüëá",
        reply_markup=key_board_count,
    )


@log_error
def choice(update: Updater, _):
    update.message.reply_text(
        generation_list_news(tag_name=list_hash_database(), news_list=list_name_new()),
        reply_markup=InlineKeyboardMarkup(generation_key_board(list_hash_database())),
    )


@log_error
def frequency(update: Updater, _):
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π", reply_markup=keyboard_frequency
    )


@log_error
def view_fag(update, _):
    id_user = hash_word(str(update.message.chat_id))
    if db.get_spisok_hash_tag(id_user) is not None:
        update.message.reply_text(
            f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ö—ç—à—Ç–µ–≥–∏ –≥—Ä—É–ø–øüëá\n"
            f'{", ".join(db.get_spisok_hash_tag(id_user))}\n'
        )
    else:
        update.message.reply_text("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –∫–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ üòß")


@log_error
def message_parse(context):
    id_users = hash_word(str(context.job.context))

    if not db.get_count_posts(id_users):
        db.update_count_posts(count=1, id_user=id_users)

    if not db.if_hash_tag_in_db(id_users):
        context.bot.send_message(
            chat_id=context.job.context,
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –∫–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏üòÆüòÆüòÆ\n"
            "–ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Ç–æ –Ω–∞–∂–º–∏—Ç–µ /choice",
        )
    else:
        count = db.get_count_posts(id_users)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö –±–æ—Ç–æ–º
        list_tag = db.get_spisok_hash_tag(
            id_users
        )  # –°–ø–∏—Å–æ–∫ —Ö—ç—à—Ç–µ–≥–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å

        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º –ø–æ—Å—Ç—ã: {count} —Å–ø–∏—Å–æ–∫ —Ö—ç—à: {list_tag}")
        for elem in list_tag:
            dict_posts = get_posts_vk(elem, count)
            context.bot.send_message(
                chat_id=context.job.context,
                text=f"üëáüëá –ù–∏–∂–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ—Å—Ç–æ–≤ —Ö—ç—à—Ç–µ–≥–∞ {elem} üëáüëá",
            )

            # –í—ã–≤–æ–¥–∏–º –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã –≥—Ä—É–ø–ø
            for news in [elem["text"] for elem in dict_posts["items"]][::-1]:
                context.bot.send_message(chat_id=context.job.context, text=news)


@log_error
def got_parse_mod(update, context):
    # –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    # 259200 604800 86400
    dict_freg_day = {"one_three_day": 259200, "one_week": 604800, "one_day": 60}

    var = db.get_freq_day_seconds(id_user := hash_word(str(update.message.chat_id)))[0]

    if var in dict_freg_day.keys():
        update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ —Ç–æ –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–±—Ä–∞–ª–∏)"
        )
        context.job_queue.run_repeating(
            callback=message_parse,
            interval=dict_freg_day[var],
            context=update.message.chat_id,
        )


@log_error
def registration_new_admin_nickname(update, _):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    nickname = update.message.text
    id_user = hash_word(str(update.effective_user.id))
    db_admin.add_nickname_admin(admin_id=id_user, nickname=hash_word(nickname))
    update.message.reply_text("–í–∞—à –Ω–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    update.message.reply_text("üëá –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–π üëá")
    update.message.reply_text(
        "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø –∏ —Ö—ç—à—Ç–µ–≥–æ–≤: /add_news\n"
        "–£–¥–∞–ª–µ–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: /delete_news"
    )
    return ConversationHandler.END


@log_error
def registration_new_admin(update, _):
    # –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    id_user = hash_word(str(update.effective_user.id))
    answer = check_new_password(update.message.text, admin_id=id_user)
    if answer[0] == 0:
        update.message.reply_text(answer[1])
        update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–µ–±–µ –Ω–∏–∫–Ω–µ–π–º –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
        )
        return "REGISTRATION_NEW_ADMIN_NICKNAME"

    else:
        update.message.reply_text(answer)
        return "REGISTRATION_NEW_ADMIN"


@log_error
def password(update, context):
    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞
    logger.debug("–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª –Ω–∞ password")
    if update.message.text == os.environ['SECRET_KEY']:
        update.message.reply_text("–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –ø–æ–¥—Ö–æ–¥–∏—Ç üòâ")
        update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
            "–ü—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
        )
        update.message.reply_text(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"
        )
        return "REGISTRATION_NEW_ADMIN"
    elif update.message.text.lower() == "—Å—Ç–æ–ø":
        return commands_admins(update=update, context=context)
    else:
        update.message.reply_text("üòÆ –ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π üòÆ")
        return "PASSWORD"


@log_error
def password_check_if_admin(update, context):
    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    try:
        text_check = update.message.text.split()
        logger.info(f"–ü–∞—Ä–æ–ª—å –∏ –Ω–∏–∫–Ω–µ–π–º –≤–≤–µ–¥—ë–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {text_check}")
        id_user = hash_word(str(update.effective_user.id))
        db_password_nickname = db_admin.get_password_nickname_admin(admin_id=id_user)
        logger.info(f"–ü–∞—Ä–æ–ª—å –∏ –Ω–∏–∫–Ω–µ–π–º –∏–∑ –±–∞–∑—ã {db_password_nickname}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–∞—Ä–æ–ª—å –∏ –Ω–∏–∫–Ω–µ–π–º —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if check_word(
            hashed_password=db_password_nickname[0], user_password=text_check[0]
        ) and check_word(
            hashed_password=db_password_nickname[1], user_password=text_check[1]
        ):
            update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å {text_check[1]}")
            update.message.reply_text(
                "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø –∏ —Ö—ç—à—Ç–µ–≥–æ–≤: /add_news\n"
                "–£–¥–∞–ª–µ–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: /delete_news"
            )
            return ConversationHandler.END

        elif update.message.text.lower() == "—Å—Ç–æ–ø":
            return commands_admins(update=update, context=context)
        else:
            update.message.reply_text(
                "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
            )
            return "PASSWORD_CHECK_IF_ADMIN"
    except Exception as _er:
        logger.error(_er)


@log_error
def admin(update, _):
    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –±—É–¥—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
    id_user = hash_word(str(update.effective_user.id))

    if db_admin.is_admin_is_db(admin_id=id_user):
        update.message.reply_text(
            "üòë –í—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. üòë\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–∞—Ä–æ–ª—å,\n"
            "–∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã–¥–∞–Ω –≤–∞–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )
        return "PASSWORD"

    else:
        update.message.reply_text(
            "üë®‚Äçüíª –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. üë®‚Äçüíª\n"
            "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Å–Ω–∞—á–∞–ª–∞ –ø–∞—Ä–æ–ª—å, –ø–æ—Ç–æ–º –≤–∞—à –Ω–∏–∫–Ω–µ–π–º"
        )
        return "PASSWORD_CHECK_IF_ADMIN"


@log_error
def commands_admins(update, context):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    update.message.reply_text("–í–∞—Å –ø–æ–Ω—è–ª, –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ")
    return ConversationHandler.END


@log_error
def add_news(update, _):
    update.message.reply_text("–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã ")
    return "ADD_NEWS"


@log_error
def add_news_word(update, context):
    # –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    text_news = update.message.text
    if check_correct_news(text_news):
        context.user_data["NEWS"] = text_news

        update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –æ—Ç–∫—É–¥–∞ –±—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"
        )
        return "ADD_HASH"
    else:
        update.message.reply_text(
            "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã"
        )
        return "ADD_NEWS"


@log_error
def add_news_hash(update, context):
    # –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö—ç—à—Ç–µ–≥–∞
    news_hash = update.message.text
    logger.info("–ü–æ–ª—É—á–µ–Ω —Ö—ç—à—Ç–µ–≥")
    if check_correct_hash(news_hash):
        delete_add_hash_post_to_database(
            hash=news_hash, news=context.user_data["NEWS"], key="–¥–æ–±–∞–≤–∏—Ç—å"
        )
        update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω)\n")
        update.message.reply_text(
            "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø –∏ —Ö—ç—à—Ç–µ–≥–æ–≤: /add_news\n"
            "–£–¥–∞–ª–µ–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: /delete_news"
        )
        return ConversationHandler.END
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ —Ö—ç—à—Ç–µ–≥")
        return "ADD_HASH"


@log_error
def delete_news(update, _):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ö—ç—à—Ç–µ–≥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
    update.message.reply_text("üëá–ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–πüëá")
    update.message.reply_text(
        '.\n'.join(list_name_new())
    )
    return "DELETE_POST"


@log_error
def delete_post(update, context):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    post = update.message.text
    if post not in list_name_new():
        update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è!!!")
        return "DELETE_POST"
    else:
        context.user_data["NEWS"] = post
        update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ –≥—Ä—É–ø–ø—ã")
        update.message.reply_text("üëá–ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ —Ö—ç—à—Ç–µ–≥–æ–≤üëá")
        update.message.reply_text(
            '.\n'.join(list_hash_database())
        )
        return "DELETE_HASH"


@log_error
def delete_hash(update, context):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ö—ç—à—Ç–µ–≥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
    hash = update.message.text
    if hash not in list_hash_database():
        update.message.text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–±—Ä–∞–Ω —Ö—ç—à—Ç–µ–≥!!!")
        return "DELETE_HASH"
    else:
        delete_add_hash_post_to_database(
            hash=hash, news=context.user_data["NEWS"], key="—É–¥–∞–ª–∏—Ç—å"
        )
        update.message.reply_text("–°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω")
        update.message.reply_text(
            "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø –∏ —Ö—ç—à—Ç–µ–≥–æ–≤: /add_news\n"
            "–£–¥–∞–ª–µ–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: /delete_news"
        )
        return ConversationHandler.END


def main():
    update = Updater(token=os.environ['BOT_TOKEN'], use_context=True)
    dis = update.dispatcher
    job_queue = JobQueue()
    job_queue.set_dispatcher(dis)

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("admin", admin)],
        states={
            "PASSWORD": [
                MessageHandler(Filters.text, password)
            ],
            "REGISTRATION_NEW_ADMIN": [
                MessageHandler(Filters.text, registration_new_admin)
            ],
            "REGISTRATION_NEW_ADMIN_NICKNAME": [
                MessageHandler(Filters.text, registration_new_admin_nickname)
            ],
            "PASSWORD_CHECK_IF_ADMIN": [
                MessageHandler(Filters.text, password_check_if_admin)
            ]
        },
        fallbacks=[MessageHandler(Filters.text, commands_admins)],
    )

    conv_handler_add_hash_post = ConversationHandler(
        entry_points=[CommandHandler('add_news', add_news)],
        states={
            "ADD_NEWS": [
                MessageHandler(Filters.text, add_news_word)
            ],
            "ADD_HASH": [
                MessageHandler(Filters.text, add_news_hash)
            ],
        },
        fallbacks=[MessageHandler(Filters.text, commands_admins)]
    )

    conv_handler_delete_hash_post = ConversationHandler(
        entry_points=[CommandHandler('delete_news', delete_news)],
        states={
            "DELETE_POST": [
                MessageHandler(Filters.text, delete_post)
            ],
            "DELETE_HASH": [
                MessageHandler(Filters.text, delete_hash)
            ]
        },
        fallbacks=[MessageHandler(Filters.text, commands_admins)]
    )
    dis.add_handler(conv_handler)
    dis.add_handler(conv_handler_add_hash_post)
    dis.add_handler(conv_handler_delete_hash_post)
    dis.add_handler(CommandHandler("admin", admin))
    dis.add_handler(CommandHandler("help", helping))
    dis.add_handler(CommandHandler("start", start))
    dis.add_handler(CommandHandler("count", count))
    dis.add_handler(CommandHandler("choice", choice))
    dis.add_handler(CommandHandler("frequency", frequency))
    dis.add_handler(CommandHandler("start_parser", got_parse_mod, pass_job_queue=True))
    dis.add_handler(CommandHandler("view", view_fag))

    dis.add_handler(MessageHandler(Filters.text, answer_count))
    dis.add_handler(CallbackQueryHandler(callback=button, pass_chat_data=True))

    update.start_polling()
    job_queue.start()
    update.idle()


if __name__ == "__main__":
    main()
